/**
 * Quink, Copyright (c) 2013-2014 IMD - International Institute for Management Development, Switzerland.
 *
 * This file is part of Quink.
 * 
 * Quink is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Quink is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Quink.  If not, see <http://www.gnu.org/licenses/>.
 */

define([
    'Underscore',
    'jquery',
    'rangy',
    'hithandler/HitHandler',
    'locrange/LocRangeUtil',
    'util/PubSub'
], function (_, $, rangy, HitHandler, LocRangeUtil, PubSub) {
    'use strict';

    var FocusTracker = function () {
        this.states = [];
        this.onSelectionChangeBound = this.onSelectionChange.bind(this);
    };

    FocusTracker.prototype.init = function (selector) {
        var onTextInsert = this.onTextInsert.bind(this);
        $('body').on('orientationchange', this.onOrientationChange);
        $(window).on('scroll', this.onScroll());
        HitHandler.register(this);
        $(selector)
            .on('blur', this.onBlur.bind(this))
            .on('focus', this.onFocus.bind(this))
            .on('scroll', this.onEditableScroll.bind(this));
        // Ensure there's always an editable.
        this.editable = $(selector)[0];
        this.firstFocus = true;
        this.bindSelectionEvents();
        PubSub.subscribe('insert.char', onTextInsert);
        PubSub.subscribe('plugin.saved', onTextInsert);
        PubSub.subscribe('insert.text', onTextInsert);
        PubSub.subscribe('insert.html', onTextInsert);
    };

    /**
     * If the browser supports selectionchange events use them. Otherwise do the best that we can.
     */
    FocusTracker.prototype.bindSelectionEvents = function () {
        var onSelectionChange = this.onSelectionChange.bind(this);
        if (document.onselectionchange === undefined) {
            PubSub.subscribe('command.executed', onSelectionChange);
            PubSub.subscribe('nav.executed', onSelectionChange);
            PubSub.subscribe('plugin.exited', onSelectionChange);
            PubSub.subscribe('editable.range', onSelectionChange);
            PubSub.subscribe('insert.char', function () {
                setTimeout(onSelectionChange, 20);
            });
            PubSub.subscribe('plugin.saved', onSelectionChange);
            PubSub.subscribe('insert.text', onSelectionChange);
            PubSub.subscribe('insert.html', onSelectionChange);
        }
    };

    /**
     * The event is generated by the browser before the orientation change is complete.
     * Wait until after completion. Would be better to detect this rather than go on a timer.
     */
    FocusTracker.prototype.onOrientationChange = function (event) {
        setTimeout(function () {
            PubSub.publish('event.orientationchange', event);
        }, 500);
    };

    /**
     * Only fire scroll events if there has actually been scrolling. No idea why the browser seems to be firing
     * scroll events when no scrolling has taken place.
     */
    FocusTracker.prototype.onScroll = function () {
        var lastScrollTop = 0;
        return function (event) {
            var scrollTop = $('body').scrollTop();
            if (scrollTop !== lastScrollTop) {
                PubSub.publish('window.scroll', event);
                lastScrollTop = scrollTop;
            }
        };
    };

    FocusTracker.prototype.onEditableScroll = function (event) {
        PubSub.publish('editable.scroll', event);
    };

    /**
     * Switch off the selection change handler to avoid an empty selection being saved.
     */
    FocusTracker.prototype.onBlur = function (event) {
        var editable = event.delegateTarget;
        $(document).off('selectionchange.focustracker');
        this.lastEditable = editable;
        PubSub.publish('editable.blur', editable);
    };

    FocusTracker.prototype.onFocus = function (event) {
        var editable = event.delegateTarget,
            state = this.findState(editable);
        $(document).on('selectionchange.focustracker', this.onSelectionChangeBound);
        this.editable = editable;
        this.lastEditable = editable;
        if (state.range) {
            state.range.refresh();
            rangy.getSelection().setSingleRange(state.range);
        }
        PubSub.publish('editable.focus', editable);
    };

    /**
     * Sets the focus to the last editable that had the focus. Ensures that there is always
     * a range is the focused editable.
     */
    FocusTracker.prototype.restoreFocus = function () {
        var editable = this.lastEditable,
            state = this.findState(editable),
            range = state.range;
        editable.focus();
        if (!range) {
            range = rangy.createRange();
            range.setStart(editable, 0);
            range.collapse(true);
            state.range = range;
        }
        $(document).on('selectionchange.focustracker', this.onSelectionChange.bind(this));
        rangy.getSelection().setSingleRange(range);
        return range;
    };

    /**
     * Removing focus from the current editable, but don't want that change in selection
     * to be reflected in the saved selection state for the editable.
     */
    FocusTracker.prototype.removeFocus = function () {
        this.storeState(this.editable);
        $(document).off('selectionchange.focustracker');
        this.editable.blur();
    };

    FocusTracker.prototype.onSelectionChange = function () {
        this.storeState(this.editable);
        PubSub.publish('selection.change', LocRangeUtil.getSelectionLoc);
    };

    /**
     * Allow time for the DOM to be updated before saving the state.
     */
    FocusTracker.prototype.onTextInsert = function () {
        setTimeout(function () {
            this.storeState(this.editable);
        }.bind(this), 20);
    };

    FocusTracker.prototype.findState = function (editable) {
        var state = _.find(this.states, function (state) {
                return state.editable === editable;
            });
        if (!state) {
            state = {
                editable: editable
            };
            this.states.push(state);
        }
        return state;
    };

    FocusTracker.prototype.storeState = function (editable) {
        var state = this.findState(editable);
        state.range = this.getRange(editable);
        state.bodyScrollTop = this.bodyScrollTop;
        state.scrollTop = this.scrollTop;
        return state;
    };

    /**
     * Returns the current range if it's in the editable.
    */
    FocusTracker.prototype.getRange = function (editable) {
        var sel = rangy.getSelection(),
            range = sel.rangeCount && sel.getRangeAt(0),
            result;
        if (range && $(range.startContainer).closest(editable).length) {
            result = range;
        }
        return result;
    };

    /**
     * Executes func every delay interval until func returns true.
     */
    FocusTracker.prototype.until = function until(func, delay) {
        if (!func()) {
            _.delay(until, delay, func, delay);
        }
    };

    /**
     * Allow time for the range to be set within the document. It seems to take ages on iOS.
     * Returns false o allow other hit handlers to access the same event.
     */
    FocusTracker.prototype.handle = function (event) {
        var storeState = function () {
                var editable = event.event.delegateTarget,
                    executed;
                if (this.getRange(editable)) {
                    executed = true;
                    this.storeState(editable);
                    if (document.onselectionchange === undefined) {
                        this.onSelectionChange();
                    }
                }
                return executed;
            }.bind(this);
        this.until(storeState, 10);
        return false;
    };

    var theInstance = new FocusTracker();

    return {
        init: theInstance.init.bind(theInstance),
        restoreFocus: theInstance.restoreFocus.bind(theInstance),
        removeFocus: theInstance.removeFocus.bind(theInstance)
    };
});
